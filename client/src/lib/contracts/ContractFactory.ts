
import { ethers } from 'ethers';
import { DeploymentStatus } from './types';

const BEP20_ABI = [
  "constructor(string name, string symbol, uint8 decimals, uint256 totalSupply, address owner)",
  "event Transfer(address indexed from, address indexed to, uint256 value)",
  "event Approval(address indexed owner, address indexed spender, uint256 value)",
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function decimals() view returns (uint8)",
  "function totalSupply() view returns (uint256)",
  "function balanceOf(address account) view returns (uint256)",
  "function transfer(address to, uint256 amount) returns (bool)",
  "function allowance(address owner, address spender) view returns (uint256)",
  "function approve(address spender, uint256 amount) returns (bool)",
  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
];

const BEP20_BYTECODE = "<truncated>

export interface IContractFactory {
  deployToken(
    name: string,
    symbol: string,
    decimals: number,
    totalSupply: string,
    owner: string
  ): Promise<string>;
  
  estimateGas(
    name: string,
    symbol: string,
    decimals: number,
    totalSupply: string
  ): Promise<string>;
}

export class ContractFactory implements IContractFactory {
  private provider: ethers.providers.Provider;
  private signer: ethers.Signer;
  private contractABI: any[] = BEP20_ABI;
  private contractBytecode: string = BEP20_BYTECODE;

  constructor(provider: ethers.providers.Provider, signer: ethers.Signer) {
    this.provider = provider;
    this.signer = signer;
  }

  async deployToken(
    name: string,
    symbol: string,
    decimals: number,
    totalSupply: string,
    owner: string,
    onStatus?: (status: DeploymentStatus, data?: any) => void
  ): Promise<string> {
    try {
      onStatus?.(DeploymentStatus.DEPLOYING);
      
      const factory = new ethers.ContractFactory(
        this.contractABI,
        this.contractBytecode,
        this.signer
      );

      const deployTx = await factory.getDeployTransaction(
        name, symbol, decimals, totalSupply, owner
      );

      const gasEstimate = await this.provider.estimateGas(deployTx);
      onStatus?.(DeploymentStatus.DEPLOYING, { gasEstimate: gasEstimate.toString() });

      const contract = await factory.deploy(
        name,
        symbol,
        decimals,
        totalSupply,
        owner
      );

      onStatus?.(DeploymentStatus.DEPLOYING, { txHash: contract.deployTransaction.hash });
      
      await contract.deployed();
      onStatus?.(DeploymentStatus.SUCCESS, { contractAddress: contract.address });
      return contract.address;
    } catch (error) {
      console.error('Error deploying token:', error);
      throw error;
    }
  }

  async estimateGas(
    name: string,
    symbol: string,
    decimals: number,
    totalSupply: string
  ): Promise<string> {
    try {
      const factory = new ethers.ContractFactory(
        this.contractABI,
        this.contractBytecode,
        this.signer
      );

      const deploymentTx = await factory.getDeployTransaction(
        name,
        symbol,
        decimals,
        totalSupply
      );

      const estimate = await this.provider.estimateGas(deploymentTx);
      return estimate.toString();
    } catch (error) {
      console.error('Error estimating gas:', error);
      throw error;
    }
  }
}
